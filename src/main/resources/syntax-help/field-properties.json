[
  {
    "title": "Auto Select",
    "summary": "When true, the field behaves as a list; clicking a line in the field automatically hilites (selects) the entire line of text.",
    "codePrefix": "autoselect",
    "templates": [
      "set the autoSelect of ${fieldExpression} to ${logicalExpression}",
      "get the autoSelect of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "logicalExpression", "description": "An expression that evaluates to either `true` or `false`."}
    ]
  },

  {
    "title": "Auto Tab",
    "summary": "When true, typing tab in the field causes focus to move to the next focusable UI component; when false, typing tab inserts a tab character into the field contents.",
    "codePrefix": "autotab",
    "templates": [
      "set the autoTab of ${fieldExpression} to ${logicalExpression}",
      "get the autoTab of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "logicalExpression", "description": "An expression that evaluates to either `true` or `false`."}
    ]
  },

  {
    "title": "Lock Text",
    "summary": "Returns or sets whether the text contained by the field can be edited by the user.",
    "codePrefix": "locktext",
    "templates": [
      "set the lockText of ${fieldExpression} to ${logicalExpression}",
      "get the lockText of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "logicalExpression", "description": "An expression that evaluates to either `true` or `false`."}
    ]
  },

  {
    "title": "Show Lines",
    "summary": "Returns or sets whether dotted baselines are drawn underneath the text (imitates ruled notebook paper).",
    "codePrefix": "showlines",
    "templates": [
      "set the showLines of ${fieldExpression} to ${logicalExpression}",
      "get the showLines of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "logicalExpression", "description": "An expression that evaluates to either `true` or `false`."}
    ]
  },

  {
    "title": "Don't Wrap",
    "summary": "Returns or sets whether text automatically breaks (wraps) at the visible edge of the field. When false, the field will scroll horizontally until a return character is reached.",
    "codePrefix": "dontwrap",
    "templates": [
      "set the dontWrap of ${fieldExpression} to ${logicalExpression}",
      "get the dontWrap of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "logicalExpression", "description": "An expression that evaluates to either `true` or `false`."}
    ]
  },

  {
    "title": "Multiple Lines",
    "summary": "Determines if multiple lines of text can be selected in auto-select mode. That is, whether the list field allows multiple selections or not. Has no effect when the `autoSelect` property is `false`.",
    "codePrefix": "multiplelines",
    "templates": [
      "set the multipleLines of ${fieldExpression} to ${logicalExpression}",
      "get the multipleLines of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "logicalExpression", "description": "An expression that evaluates to either `true` or `false`."}
    ]
  },

  {
    "title": "Scroll",
    "summary": "The number of pixels that have scrolled from the top of the field; 0 indicates that the first line of text is visible at the top field. Has no effect if the field is not scrolling.",
    "codePrefix": "scroll",
    "templates": [
      "set the scroll of ${fieldExpression} to ${integerExpression}",
      "get the scroll of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "integerExpression", "description": "An expression that evaluates to a whole number."}
    ]
  },

  {
    "title": "Scrolling",
    "summary": "Enables or disables vertical scrolling in this field. This property does not exist in Apple's HyperCard.",
    "codePrefix": "scrolling",
    "templates": [
      "set the scrolling of ${fieldExpression} to ${logicalExpression}",
      "get the scrolling of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "logicalExpression", "description": "An expression that evaluates to either `true` or `false`."}
    ]
  },

  {
    "title": "Shared Text",
    "summary": "When true, each card in the background shares the same text in the field. When false, each card in the background can place a unique value into the field. Has no effect on card fields.",
    "codePrefix": "sharedtext",
    "templates": [
      "set the sharedText of ${fieldExpression} to ${logicalExpression}",
      "get the sharedText of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "logicalExpression", "description": "An expression that evaluates to either `true` or `false`."}
    ]
  },

  {
    "title": "Wide Margins",
    "summary": "Returns or sets whether the field is drawn with a wider, 15-pixel margin between its text and border.",
    "codePrefix": "widemargins",
    "templates": [
      "set the wideMargins of ${fieldExpression} to ${logicalExpression}",
      "get the wideMargins of ${fieldExpression}"
    ],
    "parameters": [
      {"parameter": "fieldExpression", "description": "An expression identifying a field, like `the first card field`."},
      {"parameter": "logicalExpression", "description": "An expression that evaluates to either `true` or `false`."}
    ]
  }

]