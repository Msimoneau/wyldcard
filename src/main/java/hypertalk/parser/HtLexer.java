/* The following code was generated by JFlex 1.4.1 on 7/1/16 4:23 PM */

package hypertalk.parser;

import java_cup.runtime.SymbolFactory;
import java_cup.runtime.ComplexSymbolFactory;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/1/16 4:23 PM from the specification file
 * <tt>src/main/resources/HtInterpreter.jflex</tt>
 */
public class HtLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\3\1\5\2\0\1\4\22\0\1\25\1\0\1\7\3\0"+
    "\1\47\1\0\1\51\1\52\1\42\1\41\1\54\1\40\1\53\1\43"+
    "\12\2\2\0\1\45\1\44\1\46\2\0\13\1\1\37\16\1\1\0"+
    "\1\6\1\0\1\50\1\1\1\0\1\10\1\31\1\24\1\22\1\14"+
    "\1\32\1\30\1\21\1\17\1\1\1\16\1\34\1\33\1\11\1\23"+
    "\1\26\1\1\1\15\1\12\1\20\1\27\1\35\1\13\1\36\2\1"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\22\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\0\1\23\20\2"+
    "\1\24\1\25\1\2\1\26\1\27\3\2\1\30\1\2"+
    "\1\31\1\32\1\33\1\34\14\2\1\35\4\2\1\0"+
    "\1\36\1\37\1\40\1\41\2\0\1\23\1\2\1\42"+
    "\1\43\3\2\1\44\2\2\1\45\6\2\1\46\6\2"+
    "\1\0\3\2\1\47\1\2\1\50\3\2\1\51\1\2"+
    "\1\52\6\2\1\53\2\2\1\54\1\2\1\55\1\56"+
    "\1\57\3\2\1\5\5\2\1\60\3\2\1\61\1\2"+
    "\1\62\1\0\1\2\1\63\3\2\1\64\2\0\1\65"+
    "\2\2\1\66\2\2\1\67\16\2\1\70\1\71\1\2"+
    "\1\72\1\2\1\73\3\2\1\74\1\75\1\76\2\0"+
    "\4\2\1\0\1\77\1\100\1\101\1\102\1\103\1\0"+
    "\1\2\1\104\1\2\1\105\3\2\1\106\1\107\1\110"+
    "\5\2\1\111\1\112\1\113\1\2\1\114\1\115\1\2"+
    "\1\0\1\116\1\117\1\120\1\121\1\122\1\123\1\0"+
    "\2\2\1\124\1\125\1\126\1\2\1\127\2\2\1\130"+
    "\1\2\1\131\1\132\2\0\1\133\2\2\1\134\1\2"+
    "\1\135\1\2\2\0\1\2\1\136\1\137\1\0\1\140"+
    "\1\0\1\141\1\142\2\0\1\143\3\0\1\135\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\55\0\55\0\55\0\55\0\u0492\0\u04bf"+
    "\0\u04ec\0\55\0\55\0\55\0\55\0\55\0\u010e\0\u0519"+
    "\0\55\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"+
    "\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\132\0\132\0\u089d\0\u08ca"+
    "\0\u08f7\0\132\0\u0924\0\u0951\0\132\0\132\0\132\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\55\0\55\0\55\0\55\0\u0ca8\0\u0cd5\0\u010e"+
    "\0\u0d02\0\132\0\132\0\u0d2f\0\u0d5c\0\u0d89\0\132\0\u0db6"+
    "\0\u0de3\0\132\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\132\0\u1167\0\u1194"+
    "\0\u11c1\0\132\0\u11ee\0\132\0\u121b\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\132\0\u13b0\0\132"+
    "\0\u13dd\0\132\0\u140a\0\u1437\0\u1464\0\u0c7b\0\u1491\0\u14be"+
    "\0\u14eb\0\u1518\0\u1545\0\132\0\u1572\0\u159f\0\u15cc\0\132"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\132\0\u16ad\0\u16da\0\u1707"+
    "\0\132\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\132\0\u1815"+
    "\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d"+
    "\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\132\0\u1b12\0\u1b3f\0\132\0\u1b6c\0\132\0\u1b99\0\u1bc6"+
    "\0\u1bf3\0\132\0\132\0\132\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7"+
    "\0\u1cd4\0\u1d01\0\u1d2e\0\55\0\132\0\132\0\132\0\132"+
    "\0\u1d5b\0\u1d88\0\132\0\u1db5\0\132\0\u1de2\0\u1e0f\0\u1e3c"+
    "\0\132\0\132\0\132\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d"+
    "\0\u1f4a\0\132\0\132\0\u1f77\0\132\0\132\0\u1fa4\0\u1fd1"+
    "\0\55\0\132\0\132\0\132\0\132\0\u1ffe\0\u202b\0\u2058"+
    "\0\u2085\0\132\0\132\0\132\0\u20b2\0\132\0\u20df\0\u210c"+
    "\0\132\0\u2139\0\132\0\132\0\u2166\0\u2193\0\55\0\u21c0"+
    "\0\u21ed\0\132\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb"+
    "\0\132\0\132\0\u2328\0\132\0\u2355\0\55\0\u2382\0\u23af"+
    "\0\u23dc\0\55\0\u2409\0\u2436\0\u2463\0\55\0\u2490\0\u24bd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\3\1\20\1\21\1\22\1\5\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\3\3\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\56\0\2\3\5\0\15\3\1\0\12\3"+
    "\17\0\1\4\55\0\1\5\21\0\1\5\33\0\2\6"+
    "\47\0\4\47\2\0\1\50\1\51\45\47\1\0\2\3"+
    "\5\0\1\3\1\52\1\53\12\3\1\0\4\3\1\54"+
    "\2\3\1\55\2\3\16\0\2\3\5\0\7\3\1\56"+
    "\3\3\1\57\1\3\1\0\1\3\1\60\10\3\16\0"+
    "\2\3\5\0\4\3\1\61\2\3\1\62\5\3\1\0"+
    "\12\3\16\0\2\3\5\0\7\3\1\63\1\3\1\64"+
    "\1\3\1\65\1\3\1\0\12\3\16\0\2\3\5\0"+
    "\1\3\1\66\5\3\1\67\5\3\1\0\6\3\1\70"+
    "\3\3\16\0\2\3\5\0\4\3\1\71\10\3\1\0"+
    "\12\3\16\0\2\3\5\0\1\3\1\72\1\73\5\3"+
    "\1\74\1\3\1\75\2\3\1\0\4\3\1\76\5\3"+
    "\16\0\2\3\5\0\4\3\1\77\2\3\1\100\1\3"+
    "\1\101\1\3\1\102\1\3\1\0\12\3\16\0\2\3"+
    "\5\0\7\3\1\103\3\3\1\104\1\3\1\0\12\3"+
    "\16\0\2\3\5\0\1\3\1\105\3\3\1\106\7\3"+
    "\1\0\4\3\1\107\5\3\16\0\2\3\5\0\11\3"+
    "\1\110\1\3\1\111\1\3\1\0\12\3\16\0\2\3"+
    "\5\0\15\3\1\0\1\3\1\112\10\3\16\0\2\3"+
    "\5\0\1\3\1\113\13\3\1\0\12\3\16\0\2\3"+
    "\5\0\4\3\1\114\10\3\1\0\6\3\1\115\3\3"+
    "\16\0\2\3\5\0\4\3\1\116\10\3\1\0\1\3"+
    "\1\117\10\3\16\0\2\3\5\0\7\3\1\120\3\3"+
    "\1\121\1\3\1\0\1\3\1\122\10\3\16\0\2\3"+
    "\5\0\1\123\3\3\1\124\2\3\1\125\3\3\1\126"+
    "\1\3\1\0\12\3\16\0\2\3\5\0\1\127\6\3"+
    "\1\130\5\3\1\0\12\3\55\0\1\131\60\0\1\132"+
    "\1\0\1\133\52\0\1\134\57\0\1\135\5\0\3\47"+
    "\1\136\2\137\1\50\1\140\15\47\1\136\27\47\1\0"+
    "\2\3\5\0\2\3\1\141\7\3\1\142\2\3\1\0"+
    "\12\3\16\0\2\3\5\0\6\3\1\143\6\3\1\0"+
    "\12\3\16\0\2\3\5\0\10\3\1\144\4\3\1\0"+
    "\12\3\16\0\2\3\5\0\4\3\1\145\10\3\1\0"+
    "\12\3\16\0\2\3\5\0\1\3\1\146\13\3\1\0"+
    "\12\3\16\0\2\3\5\0\10\3\1\147\4\3\1\0"+
    "\12\3\16\0\2\3\5\0\15\3\1\0\5\3\1\150"+
    "\4\3\16\0\2\3\5\0\1\3\1\151\6\3\1\152"+
    "\3\3\1\153\1\0\7\3\1\154\2\3\16\0\2\3"+
    "\5\0\15\3\1\0\10\3\1\155\1\3\16\0\2\3"+
    "\5\0\10\3\1\156\4\3\1\0\12\3\16\0\2\3"+
    "\5\0\7\3\1\157\5\3\1\0\12\3\16\0\2\3"+
    "\5\0\5\3\1\160\7\3\1\0\12\3\16\0\2\3"+
    "\5\0\12\3\1\161\2\3\1\0\12\3\16\0\2\3"+
    "\5\0\15\3\1\0\2\3\1\162\7\3\16\0\2\3"+
    "\5\0\2\3\1\163\12\3\1\0\12\3\16\0\2\3"+
    "\5\0\2\3\1\164\5\3\1\165\4\3\1\0\1\166"+
    "\11\3\16\0\2\3\5\0\10\3\1\167\4\3\1\0"+
    "\12\3\16\0\2\3\5\0\15\3\1\170\12\3\16\0"+
    "\2\3\5\0\4\3\1\171\10\3\1\0\12\3\16\0"+
    "\2\3\5\0\1\3\1\172\13\3\1\0\12\3\16\0"+
    "\2\3\5\0\15\3\1\0\5\3\1\173\4\3\16\0"+
    "\2\3\5\0\4\3\1\174\2\3\1\175\5\3\1\0"+
    "\12\3\16\0\2\3\5\0\15\3\1\0\7\3\1\176"+
    "\2\3\16\0\2\3\5\0\3\3\1\177\11\3\1\0"+
    "\12\3\16\0\2\3\5\0\1\200\14\3\1\0\12\3"+
    "\16\0\2\3\5\0\1\3\1\201\13\3\1\0\12\3"+
    "\16\0\2\3\5\0\10\3\1\202\4\3\1\0\12\3"+
    "\16\0\2\3\5\0\10\3\1\203\4\3\1\0\12\3"+
    "\16\0\2\3\5\0\10\3\1\204\4\3\1\0\12\3"+
    "\16\0\2\3\5\0\13\3\1\205\1\3\1\0\12\3"+
    "\16\0\2\3\5\0\15\3\1\0\4\3\1\206\5\3"+
    "\16\0\2\3\5\0\10\3\1\207\4\3\1\0\12\3"+
    "\16\0\2\3\5\0\4\3\1\210\1\211\7\3\1\0"+
    "\4\3\1\212\5\3\16\0\2\3\5\0\5\3\1\213"+
    "\7\3\1\0\1\3\1\214\10\3\16\0\2\3\5\0"+
    "\1\3\1\215\13\3\1\0\12\3\16\0\2\3\5\0"+
    "\15\3\1\0\10\3\1\216\1\3\16\0\2\3\5\0"+
    "\2\3\1\217\12\3\1\0\12\3\16\0\2\3\5\0"+
    "\1\3\1\220\10\3\1\221\2\3\1\0\12\3\16\0"+
    "\2\3\5\0\12\3\1\222\2\3\1\0\1\3\1\223"+
    "\10\3\16\0\2\3\5\0\2\3\1\224\12\3\1\0"+
    "\12\3\16\0\2\3\5\0\1\3\1\225\13\3\1\0"+
    "\12\3\15\0\4\131\1\226\1\6\47\131\3\47\1\136"+
    "\2\137\1\50\1\51\15\47\1\136\27\47\3\0\3\137"+
    "\1\47\16\0\1\137\30\0\2\3\5\0\3\3\1\227"+
    "\11\3\1\0\12\3\16\0\2\3\5\0\4\3\1\230"+
    "\10\3\1\0\12\3\16\0\2\3\5\0\5\3\1\231"+
    "\7\3\1\0\12\3\16\0\2\3\5\0\10\3\1\232"+
    "\4\3\1\0\12\3\16\0\2\3\5\0\15\3\1\0"+
    "\3\3\1\233\6\3\16\0\2\3\5\0\12\3\1\234"+
    "\2\3\1\0\12\3\16\0\2\3\5\0\13\3\1\235"+
    "\1\3\1\0\12\3\16\0\2\3\5\0\4\3\1\236"+
    "\10\3\1\0\12\3\16\0\2\3\5\0\10\3\1\237"+
    "\4\3\1\0\12\3\16\0\2\3\5\0\11\3\1\240"+
    "\3\3\1\0\12\3\16\0\2\3\5\0\15\3\1\0"+
    "\6\3\1\241\3\3\16\0\2\3\5\0\12\3\1\242"+
    "\2\3\1\0\12\3\16\0\2\3\5\0\15\3\1\243"+
    "\12\3\16\0\2\3\5\0\11\3\1\244\3\3\1\0"+
    "\12\3\16\0\2\3\5\0\4\3\1\245\10\3\1\0"+
    "\12\3\16\0\2\3\5\0\15\3\1\0\1\3\1\246"+
    "\10\3\16\0\2\3\5\0\15\3\1\0\1\3\1\247"+
    "\10\3\16\0\2\3\5\0\4\3\1\250\10\3\1\0"+
    "\12\3\16\0\2\3\5\0\13\3\1\251\1\3\1\0"+
    "\12\3\26\0\1\252\5\0\1\253\36\0\2\3\5\0"+
    "\15\3\1\0\5\3\1\254\4\3\16\0\2\3\5\0"+
    "\10\3\1\255\4\3\1\0\12\3\16\0\2\3\5\0"+
    "\4\3\1\256\10\3\1\0\12\3\16\0\2\3\5\0"+
    "\1\3\1\257\13\3\1\0\12\3\16\0\2\3\5\0"+
    "\5\3\1\260\7\3\1\0\12\3\16\0\2\3\5\0"+
    "\1\3\1\261\13\3\1\0\12\3\16\0\2\3\5\0"+
    "\5\3\1\262\7\3\1\0\12\3\16\0\2\3\5\0"+
    "\10\3\1\263\4\3\1\0\12\3\16\0\2\3\5\0"+
    "\7\3\1\264\5\3\1\0\12\3\16\0\2\3\5\0"+
    "\15\3\1\0\3\3\1\265\6\3\16\0\2\3\5\0"+
    "\13\3\1\266\1\3\1\0\12\3\16\0\2\3\5\0"+
    "\10\3\1\267\4\3\1\0\12\3\16\0\2\3\5\0"+
    "\15\3\1\0\6\3\1\270\3\3\16\0\2\3\5\0"+
    "\2\3\1\271\12\3\1\0\12\3\16\0\2\3\5\0"+
    "\10\3\1\272\4\3\1\0\12\3\16\0\2\3\5\0"+
    "\4\3\1\273\10\3\1\0\12\3\16\0\2\3\5\0"+
    "\5\3\1\274\7\3\1\0\12\3\16\0\2\3\5\0"+
    "\14\3\1\275\1\0\12\3\16\0\2\3\5\0\2\3"+
    "\1\276\12\3\1\0\12\3\16\0\2\3\5\0\12\3"+
    "\1\277\2\3\1\0\12\3\16\0\2\3\5\0\2\3"+
    "\1\300\12\3\1\0\12\3\16\0\2\3\5\0\10\3"+
    "\1\301\4\3\1\0\12\3\16\0\2\3\5\0\4\3"+
    "\1\302\10\3\1\0\12\3\16\0\2\3\5\0\4\3"+
    "\1\303\10\3\1\0\12\3\16\0\2\3\5\0\5\3"+
    "\1\304\7\3\1\0\12\3\16\0\2\3\5\0\1\305"+
    "\14\3\1\0\12\3\16\0\2\3\5\0\11\3\1\306"+
    "\3\3\1\0\12\3\16\0\2\3\5\0\4\3\1\307"+
    "\10\3\1\0\12\3\16\0\2\3\5\0\1\3\1\310"+
    "\13\3\1\0\12\3\16\0\2\3\5\0\1\3\1\311"+
    "\13\3\1\0\12\3\16\0\2\3\5\0\11\3\1\312"+
    "\3\3\1\0\12\3\16\0\2\3\5\0\4\3\1\313"+
    "\10\3\1\0\12\3\16\0\2\3\5\0\2\3\1\314"+
    "\12\3\1\0\12\3\32\0\1\315\1\0\1\316\36\0"+
    "\2\3\5\0\10\3\1\317\4\3\1\0\12\3\16\0"+
    "\2\3\5\0\15\3\1\0\6\3\1\320\3\3\16\0"+
    "\2\3\5\0\5\3\1\321\7\3\1\0\12\3\16\0"+
    "\2\3\5\0\1\322\14\3\1\0\12\3\40\0\1\323"+
    "\42\0\1\324\44\0\2\3\5\0\2\3\1\325\12\3"+
    "\1\0\12\3\16\0\2\3\5\0\11\3\1\326\3\3"+
    "\1\0\12\3\16\0\2\3\5\0\2\3\1\327\12\3"+
    "\1\0\12\3\16\0\2\3\5\0\12\3\1\330\2\3"+
    "\1\0\12\3\16\0\2\3\5\0\15\3\1\331\12\3"+
    "\16\0\2\3\5\0\1\332\1\3\1\333\12\3\1\0"+
    "\12\3\16\0\2\3\5\0\1\334\14\3\1\0\12\3"+
    "\16\0\2\3\5\0\15\3\1\0\6\3\1\335\3\3"+
    "\16\0\2\3\5\0\1\336\14\3\1\0\12\3\16\0"+
    "\2\3\5\0\5\3\1\337\7\3\1\0\12\3\16\0"+
    "\2\3\5\0\13\3\1\340\1\3\1\0\12\3\16\0"+
    "\2\3\5\0\12\3\1\341\2\3\1\0\12\3\16\0"+
    "\2\3\5\0\10\3\1\342\4\3\1\0\12\3\16\0"+
    "\2\3\5\0\11\3\1\343\3\3\1\0\12\3\16\0"+
    "\2\3\5\0\15\3\1\0\7\3\1\344\2\3\16\0"+
    "\2\3\5\0\10\3\1\345\4\3\1\0\12\3\16\0"+
    "\2\3\5\0\10\3\1\346\4\3\1\0\12\3\16\0"+
    "\2\3\5\0\1\347\14\3\1\0\12\3\16\0\2\3"+
    "\5\0\15\3\1\0\6\3\1\350\3\3\16\0\2\3"+
    "\5\0\4\3\1\351\10\3\1\0\12\3\16\0\2\3"+
    "\5\0\2\3\1\352\12\3\1\0\12\3\16\0\2\3"+
    "\5\0\5\3\1\353\7\3\1\0\12\3\16\0\2\3"+
    "\5\0\15\3\1\0\2\3\1\354\7\3\16\0\2\3"+
    "\5\0\5\3\1\355\7\3\1\0\12\3\16\0\2\3"+
    "\5\0\12\3\1\356\2\3\1\0\12\3\16\0\2\3"+
    "\5\0\10\3\1\357\4\3\1\0\12\3\31\0\1\360"+
    "\72\0\1\361\23\0\2\3\5\0\11\3\1\362\3\3"+
    "\1\0\12\3\16\0\2\3\5\0\10\3\1\363\4\3"+
    "\1\0\12\3\16\0\2\3\5\0\1\3\1\364\13\3"+
    "\1\0\12\3\16\0\2\3\5\0\10\3\1\365\4\3"+
    "\1\0\12\3\35\0\1\366\54\0\1\367\35\0\2\3"+
    "\5\0\14\3\1\370\1\0\12\3\16\0\2\3\5\0"+
    "\7\3\1\371\5\3\1\0\12\3\16\0\2\3\5\0"+
    "\15\3\1\0\6\3\1\372\3\3\16\0\2\3\5\0"+
    "\4\3\1\373\10\3\1\0\12\3\16\0\2\3\5\0"+
    "\1\3\1\374\13\3\1\0\12\3\16\0\2\3\5\0"+
    "\4\3\1\375\10\3\1\0\12\3\16\0\2\3\5\0"+
    "\11\3\1\376\3\3\1\0\12\3\16\0\2\3\5\0"+
    "\7\3\1\377\5\3\1\0\12\3\16\0\2\3\5\0"+
    "\15\3\1\0\2\3\1\u0100\7\3\16\0\2\3\5\0"+
    "\4\3\1\u0101\10\3\1\0\12\3\16\0\2\3\5\0"+
    "\15\3\1\0\11\3\1\u0102\16\0\2\3\5\0\4\3"+
    "\1\u0103\10\3\1\0\12\3\16\0\2\3\5\0\11\3"+
    "\1\u0104\3\3\1\0\12\3\43\0\1\u0105\53\0\1\u0106"+
    "\52\0\1\u0107\32\0\2\3\5\0\10\3\1\u0108\4\3"+
    "\1\0\12\3\16\0\2\3\5\0\1\3\1\u0109\13\3"+
    "\1\0\12\3\16\0\2\3\5\0\5\3\1\u010a\7\3"+
    "\1\0\12\3\16\0\2\3\5\0\13\3\1\u010b\1\3"+
    "\1\0\12\3\16\0\2\3\5\0\4\3\1\u010c\10\3"+
    "\1\0\12\3\16\0\2\3\5\0\13\3\1\u010d\1\3"+
    "\1\0\12\3\31\0\1\u010e\57\0\1\u010f\36\0\2\3"+
    "\5\0\4\3\1\u0110\10\3\1\0\12\3\16\0\2\3"+
    "\5\0\2\3\1\u0111\12\3\1\0\12\3\16\0\2\3"+
    "\5\0\1\3\1\u0112\13\3\1\0\12\3\16\0\2\3"+
    "\5\0\15\3\1\u0113\12\3\16\0\2\3\5\0\14\3"+
    "\1\u0114\1\0\12\3\25\0\1\u0115\55\0\1\u0116\44\0"+
    "\2\3\5\0\5\3\1\u0117\7\3\1\0\12\3\30\0"+
    "\1\u0118\15\0\1\u0119\43\0\1\u011a\35\0\2\3\5\0"+
    "\2\3\1\333\12\3\1\0\12\3\34\0\1\u011b\60\0"+
    "\1\u011c\42\0\1\u011d\101\0\1\u011e\40\0\1\u011f\55\0"+
    "\1\u0120\44\0\1\u011e\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\4\11\3\1\5\11\2\0\1\11"+
    "\57\1\1\0\4\11\2\0\30\1\1\0\52\1\1\0"+
    "\6\1\2\0\41\1\2\0\4\1\1\0\1\11\4\1"+
    "\1\0\26\1\1\0\1\11\5\1\1\0\15\1\2\0"+
    "\1\11\6\1\2\0\3\1\1\0\1\1\1\0\1\11"+
    "\1\1\2\0\1\11\3\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   private SymbolFactory sf = new ComplexSymbolFactory ();
   public HtLexer (java.io.InputStream r, SymbolFactory sf)
   {
     this (r);
     this.sf = sf;
   }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HtLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HtLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return sf.newSymbol ("put", sym.PUT);
          }
        case 100: break;
        case 66: 
          { return sf.newSymbol ("times", sym.TIMES);
          }
        case 101: break;
        case 61: 
          { return sf.newSymbol ("while", sym.WHILE);
          }
        case 102: break;
        case 35: 
          { return sf.newSymbol ("ask", sym.ASK);
          }
        case 103: break;
        case 27: 
          { return sf.newSymbol ("or", sym.OR);
          }
        case 104: break;
        case 49: 
          { return sf.newSymbol ("with", sym.WITH);
          }
        case 105: break;
        case 1: 
          { System.out.println ("Illegal character: <" + yytext () + ">");
          }
        case 106: break;
        case 65: 
          { return sf.newSymbol ("tenth", sym.TENTH);
          }
        case 107: break;
        case 74: 
          { return sf.newSymbol ("lines", sym.LINES);
          }
        case 108: break;
        case 48: 
          { return sf.newSymbol ("send", sym.SEND);
          }
        case 109: break;
        case 30: 
          { return sf.newSymbol ("<=", sym.LESSEQUALS);
          }
        case 110: break;
        case 67: 
          { return sf.newSymbol ("third", sym.THIRD);
          }
        case 111: break;
        case 88: 
          { return sf.newSymbol ("middle", sym.MIDDLE);
          }
        case 112: break;
        case 34: 
          { return sf.newSymbol ("and", sym.AND);
          }
        case 113: break;
        case 53: 
          { return sf.newSymbol ("item", sym.ITEM);
          }
        case 114: break;
        case 54: 
          { return sf.newSymbol ("then", sym.THEN);
          }
        case 115: break;
        case 94: 
          { return sf.newSymbol ("contains", sym.CONTAINS);
          }
        case 116: break;
        case 72: 
          { return sf.newSymbol ("fifth", sym.FIFTH);
          }
        case 117: break;
        case 26: 
          { return sf.newSymbol ("on", sym.ON);
          }
        case 118: break;
        case 14: 
          { return sf.newSymbol ("^", sym.CARET);
          }
        case 119: break;
        case 51: 
          { return sf.newSymbol ("else", sym.ELSE);
          }
        case 120: break;
        case 55: 
          { return sf.newSymbol ("char", sym.CHAR);
          }
        case 121: break;
        case 60: 
          { return sf.newSymbol ("sixth", sym.SIXTH);
          }
        case 122: break;
        case 75: 
          { return sf.newSymbol ("answer", sym.ANSWER);
          }
        case 123: break;
        case 36: 
          { return sf.newSymbol ("not", sym.NOT);
          }
        case 124: break;
        case 12: 
          { return sf.newSymbol (">", sym.GREATER);
          }
        case 125: break;
        case 3: 
          { int i = Integer.parseInt (yytext ());
		return sf.newSymbol ("IntegerConstant", sym.INTEGER_CONSTANT, new Integer (i));
          }
        case 126: break;
        case 31: 
          { return sf.newSymbol ("<>", sym.LESSGREATER);
          }
        case 127: break;
        case 11: 
          { return sf.newSymbol ("<", sym.LESS);
          }
        case 128: break;
        case 32: 
          { return sf.newSymbol (">=", sym.GREATEREQUALS);
          }
        case 129: break;
        case 5: 
          { return sf.newSymbol ("Return", sym.RETURN);
          }
        case 130: break;
        case 8: 
          { return sf.newSymbol ("*", sym.STAR);
          }
        case 131: break;
        case 37: 
          { return sf.newSymbol ("set", sym.SET);
          }
        case 132: break;
        case 10: 
          { return sf.newSymbol ("=", sym.EQUALS);
          }
        case 133: break;
        case 95: 
          { return sf.newSymbol ("function", sym.FUNCTION);
          }
        case 134: break;
        case 92: 
          { return sf.newSymbol ("forever", sym.FOREVER);
          }
        case 135: break;
        case 68: 
          { return sf.newSymbol ("chars", sym.CHARS);
          }
        case 136: break;
        case 38: 
          { return sf.newSymbol ("end", sym.END);
          }
        case 137: break;
        case 29: 
          { return sf.newSymbol ("me", sym.ME);
          }
        case 138: break;
        case 17: 
          { return sf.newSymbol (".", sym.DOT);
          }
        case 139: break;
        case 58: 
          { return sf.newSymbol ("after", sym.AFTER);
          }
        case 140: break;
        case 28: 
          { return sf.newSymbol ("of", sym.OF);
          }
        case 141: break;
        case 79: 
          { return sf.newSymbol ("eighth", sym.EIGTH);
          }
        case 142: break;
        case 22: 
          { return sf.newSymbol ("id", sym.ID);
          }
        case 143: break;
        case 39: 
          { return sf.newSymbol ("the", sym.THE);
          }
        case 144: break;
        case 73: 
          { return sf.newSymbol ("mouse", sym.MOUSE);
          }
        case 145: break;
        case 25: 
          { return sf.newSymbol ("do", sym.DO);
          }
        case 146: break;
        case 24: 
          { return sf.newSymbol ("to", sym.TO);
          }
        case 147: break;
        case 33: 
          { return sf.newSymbol ("&&", sym.AMPAMP);
          }
        case 148: break;
        case 20: 
          { return sf.newSymbol ("in", sym.IN);
          }
        case 149: break;
        case 57: 
          { return sf.newSymbol ("line", sym.LINE);
          }
        case 150: break;
        case 90: 
          { return sf.newSymbol ("seventh", sym.SEVENTH);
          }
        case 151: break;
        case 91: 
          { return sf.newSymbol ("down to", sym.DOWNTO);
          }
        case 152: break;
        case 84: 
          { return sf.newSymbol ("global", sym.GLOBAL);
          }
        case 153: break;
        case 42: 
          { return sf.newSymbol ("get", sym.GET);
          }
        case 154: break;
        case 86: 
          { return sf.newSymbol ("button", sym.BUTTON);
          }
        case 155: break;
        case 44: 
          { return sf.newSymbol ("max", sym.MAX);
          }
        case 156: break;
        case 18: 
          { return sf.newSymbol (",", sym.COMMA);
          }
        case 157: break;
        case 76: 
          { return sf.newSymbol ("number", sym.NUMBER);
          }
        case 158: break;
        case 99: 
          { return sf.newSymbol ("end repeat", sym.ENDREPEAT);
          }
        case 159: break;
        case 85: 
          { return sf.newSymbol ("before", sym.BEFORE);
          }
        case 160: break;
        case 77: 
          { return sf.newSymbol ("second", sym.SECOND);
          }
        case 161: break;
        case 21: 
          { return sf.newSymbol ("is", sym.IS);
          }
        case 162: break;
        case 45: 
          { return sf.newSymbol ("min", sym.MIN);
          }
        case 163: break;
        case 89: 
          { return sf.newSymbol ("average", sym.AVERAGE);
          }
        case 164: break;
        case 2: 
          { return sf.newSymbol ("Identifier", sym.IDENTIFIER, yytext ());
          }
        case 165: break;
        case 16: 
          { return sf.newSymbol (")", sym.RPAREN);
          }
        case 166: break;
        case 70: 
          { return sf.newSymbol ("do", sym.FIELD);
          }
        case 167: break;
        case 80: 
          { return sf.newSymbol ("result", sym.RESULT);
          }
        case 168: break;
        case 7: 
          { return sf.newSymbol ("+", sym.PLUS);
          }
        case 169: break;
        case 13: 
          { return sf.newSymbol ("&", sym.AMP);
          }
        case 170: break;
        case 46: 
          { return sf.newSymbol ("mid", sym.MID);
          }
        case 171: break;
        case 40: 
          { return sf.newSymbol ("div", sym.DIV);
          }
        case 172: break;
        case 50: 
          { return sf.newSymbol ("word", sym.WORD);
          }
        case 173: break;
        case 63: 
          { return sf.newSymbol ("is in", sym.ISIN);
          }
        case 174: break;
        case 81: 
          { return sf.newSymbol ("return", sym.RETURN_KEYWORD);
          }
        case 175: break;
        case 19: 
          { String str = yytext ().substring (1, yylength () - 1);
	    return sf.newSymbol ("literal", sym.LITERAL, str);
          }
        case 176: break;
        case 97: 
          { return sf.newSymbol ("is not in", sym.ISNOTIN);
          }
        case 177: break;
        case 96: 
          { return sf.newSymbol ("mouseLoc", sym.MOUSELOC);
          }
        case 178: break;
        case 6: 
          { return sf.newSymbol ("-", sym.MINUS);
          }
        case 179: break;
        case 23: 
          { return sf.newSymbol ("if", sym.IF);
          }
        case 180: break;
        case 69: 
          { return sf.newSymbol ("until", sym.UNTIL);
          }
        case 181: break;
        case 64: 
          { return sf.newSymbol ("items", sym.ITEMS);
          }
        case 182: break;
        case 93: 
          { return sf.newSymbol ("id", sym.MESSAGEBOX);
          }
        case 183: break;
        case 52: 
          { return sf.newSymbol ("into", sym.INTO);
          }
        case 184: break;
        case 47: 
          { return sf.newSymbol ("mod", sym.MOD);
          }
        case 185: break;
        case 43: 
          { return sf.newSymbol ("for", sym.FOR);
          }
        case 186: break;
        case 56: 
          { return sf.newSymbol ("last", sym.LAST);
          }
        case 187: break;
        case 87: 
          { return sf.newSymbol ("fourth", sym.FOURTH);
          }
        case 188: break;
        case 82: 
          { return sf.newSymbol ("repeat", sym.REPEAT);
          }
        case 189: break;
        case 59: 
          { return sf.newSymbol ("ninth", sym.NINTH);
          }
        case 190: break;
        case 62: 
          { return sf.newSymbol ("words", sym.WORDS);
          }
        case 191: break;
        case 78: 
          { return sf.newSymbol ("end if", sym.ENDIF);
          }
        case 192: break;
        case 15: 
          { return sf.newSymbol ("(", sym.LPAREN);
          }
        case 193: break;
        case 71: 
          { return sf.newSymbol ("first", sym.FIRST);
          }
        case 194: break;
        case 9: 
          { return sf.newSymbol ("/", sym.SLASH);
          }
        case 195: break;
        case 98: 
          { return sf.newSymbol ("character", sym.CHAR);
          }
        case 196: break;
        case 83: 
          { return sf.newSymbol ("is not", sym.ISNOT);
          }
        case 197: break;
        case 4: 
          { 
          }
        case 198: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return sf.newSymbol ("EOF", sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java HtLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        HtLexer scanner = null;
        try {
          scanner = new HtLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
